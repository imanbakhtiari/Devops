stages:
  - release

variables:
  GITLAB_URL: "https://gitlab.example.com"
  # Path to the file you want to upload
  FILE_PATH: "path/to/your/file"  # Set this to the actual path of your file
  INITIAL_VERSION: "v1.0.0"
  PROJECT_ID: "6"

increment_version:
  stage: release
  script:
    # Get the latest tag or set it to the initial version if no tag exists
    - LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo ${INITIAL_VERSION})
    # Strip the 'v' prefix from the tag
    - VERSION_BASE=${LATEST_TAG/v/}
    # Split the version into its parts (major, minor, patch)
    - IFS='.' read -r -a VERSION_PARTS <<< "$VERSION_BASE"
    # Increment the patch version
    - PATCH_VERSION=$((VERSION_PARTS[2] + 1))

    # Keep incrementing PATCH_VERSION until a unique tag is found
    - while git rev-parse "v${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$PATCH_VERSION" >/dev/null 2>&1; do
        PATCH_VERSION=$((PATCH_VERSION + 1));
      done

    # Create the new version tag
    - NEW_VERSION="v${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$PATCH_VERSION"
    # Echo the new version
    - echo "New version ${NEW_VERSION}"

    # Create a new release on GitLab with the new version tag
    - >
      curl --header "PRIVATE-TOKEN: ${TOKENCI}" --header "Content-Type: application/json" \
           --data "{\"name\": \"Release ${NEW_VERSION}\", \"tag_name\": \"${NEW_VERSION}\", \"ref\": \"main\", \"description\": \"Release description\"}" \
           --request POST "${GITLAB_URL}/api/v4/projects/${CI_PROJECT_ID}/releases"

    # Upload the file as part of the release
    - >
      curl --header "PRIVATE-TOKEN: ${TOKENCI}" --form "file=@${FILE_PATH}" \
           "${GITLAB_URL}/api/v4/projects/${CI_PROJECT_ID}/uploads"
